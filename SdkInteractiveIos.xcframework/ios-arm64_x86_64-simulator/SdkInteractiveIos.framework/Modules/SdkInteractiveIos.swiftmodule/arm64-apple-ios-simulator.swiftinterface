// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SdkInteractiveIos
import AVFoundation
import AVKit
import Alamofire
import CoreVideo
import Foundation
import RxCocoa
import RxSwift
@_exported import SdkInteractiveIos
import SocketIO
import Swift
import SwiftyJSON
import UIKit
import WebKit
import _Concurrency
extension Foundation.NSNotification.Name {
  public static let overlayEvents: Foundation.Notification.Name
}
public enum OverlayAlignment : Swift.String {
  case LeftTop
  case LeftCenter
  case LeftBottom
  case CenterTop
  case Center
  case CenterBottom
  case RightTop
  case RightCenter
  case RightBottom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OverlayPosition : Swift.Codable {
  public let x: Swift.Int
  public let y: Swift.Int
  public var alignment: SdkInteractiveIos.OverlayAlignment?
  public init(x: Swift.Int, y: Swift.Int, alignment: SdkInteractiveIos.OverlayAlignment? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Media : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Content : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Answers : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class TypeInteractive {
  public static let INTERACTIVE_PING_ANALYTICS: Swift.String
  public static let INTERACTIVE_SHOW_ANALYTICS: Swift.String
  public static let INTERACTIVE_HIDE_ANALYTICS: Swift.String
  public static let INTERACTIVE_ACTION_REPORT: Swift.String
  public static let CLICK_ADS: Swift.String
  @objc deinit
}
public enum GetOverlayVodFailureReason : Swift.Int, Swift.Error {
  case unAuthorized
  case notFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias GetOverlayVodResult = Swift.Result<SdkInteractiveIos.OverlayVod, SdkInteractiveIos.GetOverlayVodFailureReason>
public typealias GetOverlayVodCompletion = (_ result: SdkInteractiveIos.GetOverlayVodResult) -> Swift.Void
public struct Position : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class OverlayPlayer : ObjectiveC.NSObject {
  public func add(to view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
public struct Ratio : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol InteractiveViewDelegate : AnyObject {
  func shrinkScreenInteractive(show: Swift.Bool, direction: Swift.Int, withXScale x: CoreGraphics.CGFloat, withYScale y: CoreGraphics.CGFloat)
}
public protocol SocketIOManagement {
  func addCallback(callBack: @escaping (Swift.String, Any) -> ())
  func connection(url: Swift.String)
  func isConnected() -> Swift.Bool
  func joinRoom(data: SdkInteractiveIos.JoinRoomData)
  func sendMessage(message: Swift.String)
  func leaveRoom(data: SdkInteractiveIos.JoinRoomData)
  func disconnection()
  func onDestroy()
  func getSocketId() -> Swift.String
}
public struct JoinRoomData : Swift.Codable {
  public var deviceId: Swift.String
  public var mediaContentId: Swift.String
  public var os: Swift.String
  public var tenantId: Swift.String
  public init(mediaContentId: Swift.String)
  public init(deviceId: Swift.String, mediaContentId: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func setMediaContentId(mediaContentId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class JoinRoom {
  public static let shared: SdkInteractiveIos.JoinRoom
  public func getMediaContentId() -> Swift.String
  @objc deinit
}
public class OverlayVodDataUseCaseImpl : SdkInteractiveIos.OverlayVodDataUseCase {
  public init(repository: SdkInteractiveIos.OverlayVodDataSourceRepository)
  public func loadScenarioVod(urlString: Swift.String) -> RxSwift.Single<SdkInteractiveIos.OverlayVod>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TimerExt {
  public static func coundDownTime(progress: @escaping () -> Swift.Void) -> Foundation.Timer
  @objc deinit
}
@objc public class OverlayWebViewCallBack : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  public init(overlay: SdkInteractiveIos.Overlay, webViewCallBack: @escaping (WebKit.WKScriptMessage, SdkInteractiveIos.Overlay) -> Swift.Void)
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
public struct OverlayVod : Swift.Codable {
  public let _id: Swift.String?
  public let name: Swift.String?
  public let channel: Swift.String?
  public let media: Swift.String?
  public let description: Swift.String?
  public let noPhase: Swift.Int?
  public let phases: [SdkInteractiveIos.Phases]?
  public let status: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let __v: Swift.Int?
  public let startTime: Swift.String?
  public let endActiveTime: Swift.String?
  public let startActiveTime: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class UIOverlay : ObjectiveC.NSObject {
  public init(overlay: UIKit.UIView)
  public func setWidthAndHeightForOverlay(w: Swift.Float, h: Swift.Float)
  public func addLeftTop(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addLeftCenter(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addLeftBottom(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addCenterTop(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addCenter(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addCenterBottom(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addRightTop(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addRightCenter(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func addRightBottom(url: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> WebKit.WKWebView?
  public func removeWebView(webView: WebKit.WKWebView)
  public func stopWebView(webView: WebKit.WKWebView)
  public func onStop()
  public func hideOverlay()
  public func showOverlay()
  @objc deinit
}
public class LiveCompensatoryShotImpl : SdkInteractiveIos.LiveCompensatoryShot {
  public init()
  public func loadScenarioLive(mediaContentId: Swift.String) -> SdkInteractiveIos.OverlayLive?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SocketEvents {
  public static let CONNECTED: Swift.String
  public static let JOIN_ROOM: Swift.String
  public static let OVERLAY: Swift.String
  public static let DISCONNECTED: Swift.String
  public static let ERROR: Swift.String
  public static let LEAVE_ROOM: Swift.String
  @objc deinit
}
public class OverlayVodDataSourceRepositoryImpl : SdkInteractiveIos.OverlayVodDataSourceRepository {
  public init(overlayVodDataRemote: SdkInteractiveIos.OverlayVodDataSourceRemote)
  public func loadScenarioVod(urlString: Swift.String) -> RxSwift.Single<SdkInteractiveIos.OverlayVod>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LiveLogRepository {
  public static let shared: SdkInteractiveIos.LiveLogRepository
  final public let KEY_ENABLE_PROD_ENV: Swift.String
  public func callApiLog(token: Swift.String, parameters: Swift.Dictionary<Swift.String, Any>)
  @objc deinit
}
public protocol LiveCompensatoryShot {
  func loadScenarioLive(mediaContentId: Swift.String) -> SdkInteractiveIos.OverlayLive?
}
public struct Interactive : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol OverlayManagement {
  var isReadyToShowVodOverlay: Swift.Bool { get set }
  func initialization(overlayView: SdkInteractiveIos.UIOverlay)
  func setupDataToPrepareShowVOD(timeLineList: Swift.Array<SdkInteractiveIos.Timelines>)
  func prepareShowOverlayForVod(overlayList: Swift.Array<SdkInteractiveIos.Overlay>)
  mutating func showOverlayLive(overlay: SdkInteractiveIos.Overlay, authenToken: Swift.String, mediaContentId: Swift.String, socketId: Swift.String?)
  func stopShowOverlayPlayback()
  func hiddenOverlay()
  func onDestroy()
  func removeAllView()
  func setupDelegate(interactiveViewDelegate: SdkInteractiveIos.InteractiveViewDelegate)
}
public class InteractiveControllerView {
  public var overlayManagement: SdkInteractiveIos.OverlayManagement?
  final public let KEY_ENABLE_PROD_ENV: Swift.String
  public init()
  public func initAuthenToken(authenToken: Swift.String)
  public func setFrameworkVersion(version: Swift.String)
  public func initMediaContentId(mediaContentId: Swift.String)
  public func removeAllView()
  public func connectSocket()
  public func getSocketStatus() -> Swift.Bool
  public func initOverlay(uiView: UIKit.UIView)
  public func addViewForPlayer(uiView: UIKit.UIView)
  public func joinRoom()
  public func leaveRoom()
  public func disconnection()
  public func handleEventsSocket()
  public func startShowLive(mediaContentId: Swift.String)
  public func startShowLiveOverlayWithDataReceived(data: Any, mediaContentId: Swift.String)
  public func getInfoCompensatory(mediaContentId: Swift.String, interactiveId: Swift.String) -> Swift.Bool
  public func saveInfoCompensatory(compensatory: SdkInteractiveIos.Compensatory)
  @objc deinit
}
public protocol PlayerChangeListener {
  func currentPosition() -> Swift.CLong?
}
public struct Channel : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol OverlayVodDataSourceRemote {
  func loadScenarioVod(urlString: Swift.String) -> RxSwift.Single<SdkInteractiveIos.OverlayVod>
}
public struct Phases : Swift.Codable {
  public let timelines: [SdkInteractiveIos.Timelines]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol OverlayVodDataUseCase {
  func loadScenarioVod(urlString: Swift.String) -> RxSwift.Single<SdkInteractiveIos.OverlayVod>
}
public protocol OverlayVodDataSourceRepository {
  func loadScenarioVod(urlString: Swift.String) -> RxSwift.Single<SdkInteractiveIos.OverlayVod>
}
public struct Timelines : Swift.Codable {
  public let _id: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class SocketIOManagementImpl : SdkInteractiveIos.SocketIOManagement {
  public init()
  public func addCallback(callBack: @escaping (Swift.String, Any) -> ())
  public func connection(url: Swift.String)
  public func isConnected() -> Swift.Bool
  public func joinRoom(data: SdkInteractiveIos.JoinRoomData)
  public func sendMessage(message: Swift.String)
  public func leaveRoom(data: SdkInteractiveIos.JoinRoomData)
  public func disconnection()
  public func onDestroy()
  public func getSocketId() -> Swift.String
  @objc deinit
}
public struct OverlaySize : Swift.Codable {
  public var w: Swift.Float
  public var h: Swift.Float
  public init(w: Swift.Float, h: Swift.Float)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OverlayLive : Swift.Codable {
  public let metadata: SdkInteractiveIos.Metadata
  public let ts: Swift.Int
  public let timelineID: Swift.String
  public let src: Swift.String
  public let mediaContentID: Swift.String
  public let targets: Swift.String
  public let duration: Swift.Int
  public let frequencyLimit: Swift.Int?
  public let serverTime: Swift.Int?
  public let sendTime: Swift.Int?
  public let requiredFocus: Swift.Bool?
  public let isPopupOverlay: Swift.Bool?
  public let tenantId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Metadata : Swift.Codable {
  public let size: SdkInteractiveIos.OverlaySize
  public let pos: SdkInteractiveIos.OverlayPosition
  public let duration: Swift.Int
  public let targets: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OverlayLiveData : Swift.Codable {
  public let data: SdkInteractiveIos.OverlayLive?
  public let statusCode: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class Overlay : Swift.Codable {
  final public let id: Swift.String
  final public let src: Swift.String
  final public let ttl: Swift.CLong
  final public let ts: Swift.String
  public var pos: SdkInteractiveIos.OverlayPosition
  final public let size: SdkInteractiveIos.OverlaySize
  public var startTimeShowOverlay: Swift.CLong?
  final public let isPopupOverlay: Swift.Bool?
  public var elasticityLocation: Swift.Int?
  public init(id: Swift.String, src: Swift.String, ttl: Swift.CLong, ts: Swift.String, pos: SdkInteractiveIos.OverlayPosition, size: SdkInteractiveIos.OverlaySize, startTimeShowOverlay: Swift.CLong? = nil, isPopupOverlay: Swift.Bool)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Compensatory : Swift.Codable {
  public let mediaId: Swift.String
  public let duration: Swift.Int
  public let frequencyLimit: Swift.Int
  public let interactiveId: Swift.String
  public let unlockedTime: Foundation.Date
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OverlayConstants {
  public static let PLAYER_IS_RUNNING: Swift.String
}
public struct Template : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class OverlayManagementImpl : SdkInteractiveIos.OverlayManagement {
  weak public var interactiveViewDelegate: SdkInteractiveIos.InteractiveViewDelegate?
  public func setupDelegate(interactiveViewDelegate: SdkInteractiveIos.InteractiveViewDelegate)
  public var isReadyToShowVodOverlay: Swift.Bool
  public init()
  public func initialization(overlayView: SdkInteractiveIos.UIOverlay)
  public func showOverlayLive(overlay: SdkInteractiveIos.Overlay, authenToken: Swift.String, mediaContentId: Swift.String, socketId: Swift.String?)
  public func setupDataToPrepareShowVOD(timeLineList: Swift.Array<SdkInteractiveIos.Timelines>)
  public func prepareShowOverlayForVod(overlayList: Swift.Array<SdkInteractiveIos.Overlay>)
  public func stopShowOverlayPlayback()
  public func hiddenOverlay()
  public func onDestroy()
  public func removeAllView()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JsonExt {
  public static func toJSON(data: Foundation.NSDictionary) -> Swift.String
  public static func toJSON(data: Foundation.Data) -> Swift.String
  public static func convertStringToDictionary(data: Swift.String) -> [Swift.String : Swift.AnyObject]?
  public static func convertToDictionary(text: Swift.String) -> [Swift.String : Any]?
  public static func parseJSON(_ data: Foundation.Data) -> [Swift.String : Any]?
  @objc deinit
}
public class OverlayVodDataSourceRemoteImpl : SdkInteractiveIos.OverlayVodDataSourceRemote {
  public init()
  public func loadScenarioVod(urlString: Swift.String) -> RxSwift.Single<SdkInteractiveIos.OverlayVod>
  @objc deinit
}
extension SdkInteractiveIos.OverlayAlignment : Swift.Equatable {}
extension SdkInteractiveIos.OverlayAlignment : Swift.Hashable {}
extension SdkInteractiveIos.OverlayAlignment : Swift.RawRepresentable {}
extension SdkInteractiveIos.GetOverlayVodFailureReason : Swift.Equatable {}
extension SdkInteractiveIos.GetOverlayVodFailureReason : Swift.Hashable {}
extension SdkInteractiveIos.GetOverlayVodFailureReason : Swift.RawRepresentable {}
